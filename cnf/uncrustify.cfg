#
# Formato para uncrustify
#
# Comentarios a /**/
# Tab a espacios
# Alinea parámetros de función
# Wrap en columna 80
#

sp_pp_concat                    = ignore      # ignore/add/remove/force
sp_angle_shift                  = ignore      # ignore/add/remove/force
sp_after_semi                   = ignore      # ignore/add/remove/force
sp_word_brace                   = ignore      # ignore/add/remove/force
sp_word_brace_ns                = ignore      # ignore/add/remove/force
sp_before_nl_cont               = ignore      # ignore/add/remove/force
# Tabs a espacios (4)
# --------------------------------------------------------------------------
# The original size of tabs in the input.
#
# default: 8
input_tab_size                  = 4        # unsigned number

# the size of tabs in the output (only used if align_with_tabs=true).
#
# default: 8
output_tab_size                 = 4        # unsigned number

# The number of columns to indent per level. Usually 2, 3, 4, or 8.
#
# Default: 8
indent_columns                  = 4        # unsigned number

# How to use tabs when indenting code.
#
# 0: Spaces only
# 1: Indent with tabs to brace level, align with spaces (default)
# 2: Indent and align with tabs, using spaces when not on a tabstop
#
# Default: 1
indent_with_tabs                = 0        # unsigned number

# Whether to keep non-indenting tabs.
align_keep_tabs                 = false    # true/false

# Whether to use tabs for aligning.
align_with_tabs                 = false   # true/false

# Whether to bump out to the next tab when aligning.
align_on_tabstop                = false    # true/false

# Whether to right-align numbers.
align_number_right              = false    # true/false

# Whether to keep whitespace not required for alignment.
align_keep_extra_space          = false    # true/false

# Máximo 80 columnas
# --------------------------------------------------------------------------
# Try to limit code width to N columns.
code_width                      = 80        # unsigned number

# Whether to fully split long 'for' statements at semi-colons.
ls_for_split_full               = false    # true/false

# Whether to fully split long function prototypes/calls at commas.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_func_split_full              = false    # true/false

# Whether to split lines as close to code_width as possible and ignore some
# groupings.
# The option ls_code_width has priority over the option ls_func_split_full.
ls_code_width                   = false    # true/false


# Alinea parámetros a funciones
# --------------------------------------------------------------------------
# Los parámetros de la declaración de una función se alineando al primer
# parentesis si se dividen en varias lineas. true para desactivar
indent_func_call_param          = false    # true/false

# Whether to align variable definitions in prototypes and functions.
align_func_params               = true    # true/false

# The span for aligning function prototypes.
#
# 0 = Don't align (default).
align_func_proto_span           = 1        # unsigned number


# Whether to align single-line functions with function prototypes.
# Uses align_func_proto_span.
align_single_line_func          = true    # true/false


# Add or remove newline between return type and function name in a function
# definition.
nl_func_type_name               = remove   # ignore/add/remove/force


# COMENTARIOS
# Los convierte todos al estilo C puro /**/
# --------------------------------------------------------------------------

# Try to wrap comments at N columns.
cmt_width                       = 80        # unsigned number

# How to reflow comments.
#
# 0: No reflowing (apart from the line wrapping due to cmt_width) (default)
# 1: No touching at all
# 2: Full reflow
cmt_reflow_mode                 = 2       # unsigned number

# Whether to convert all tabs to spaces in comments. If false, tabs in
# comments are left alone, unless used for indenting.
cmt_convert_tab_to_spaces       = true    # true/false

# Whether to apply changes to multi-line comments, including cmt_width,
# keyword substitution and leading chars.
#
# Default: true
cmt_indent_multi                = true    # true/false

# Whether to group c-comments that look like they are in a block.
cmt_c_group                     = true    # true/false

# Whether to put an empty '/*' on the first line of the combined c-comment.
cmt_c_nl_start                  = false   # true/false

# Whether to add a newline before the closing '*/' of the combined c-comment.
cmt_c_nl_end                    = false   # true/false

# Whether to change cpp-comments into c-comments.
cmt_cpp_to_c                    = true    # true/false

# Agrupa comentarios
cmt_cpp_group                   = true    # true/false

# Whether to put an empty '/*' on the first line of the combined cpp-comment
# when converting to a c-comment.
#
# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.
cmt_cpp_nl_start                = false   # true/false

# Whether to add a newline before the closing '*/' of the combined cpp-comment
# when converting to a c-comment.
#
# Requires cmt_cpp_to_c=true and cmt_cpp_group=true.
cmt_cpp_nl_end                  = true   # true/false

# Whether to put a star on subsequent comment lines.
cmt_star_cont                   = true    # true/false

# The number of spaces to insert at the start of subsequent comment lines.
cmt_sp_before_star_cont         = 0        # unsigned number

# The number of spaces to insert after the star on subsequent comment lines.
cmt_sp_after_star_cont          = 0        # unsigned number

# For multi-line comments with a '*' lead, remove leading spaces if the first
# and last lines of the comment are the same length.
#
# Default: true
cmt_multi_check_last            = true     # true/false

# For multi-line comments with a '*' lead, remove leading spaces if the first
# and last lines of the comment are the same length AND if the length is
# bigger as the first_len minimum.
#
# Default: 4
cmt_multi_first_len_minimum     = 4        # unsigned number

# Path to a file that contains text to insert at the beginning of a file if
# the file doesn't start with a C/C++ comment. If the inserted text contains
# '$(filename)', that will be replaced with the current file's name.
cmt_insert_file_header          = ""         # string

# Path to a file that contains text to insert at the end of a file if the
# file doesn't end with a C/C++ comment. If the inserted text contains
# '$(filename)', that will be replaced with the current file's name.
cmt_insert_file_footer          = ""         # string

# Path to a file that contains text to insert before a function definition if
# the function isn't preceded by a C/C++ comment. If the inserted text
# contains '$(function)', '$(javaparam)' or '$(fclass)', these will be
# replaced with, respectively, the name of the function, the javadoc '@param'
# and '@return' stuff, or the name of the class to which the member function
# belongs.
cmt_insert_func_header          = ""         # string

# Path to a file that contains text to insert before a class if the class
# isn't preceded by a C/C++ comment. If the inserted text contains '$(class)',
# that will be replaced with the class name.
cmt_insert_class_header         = ""         # string

# Path to a file that contains text to insert before an Objective-C message
# specification, if the method isn't preceded by a C/C++ comment. If the
# inserted text contains '$(message)' or '$(javaparam)', these will be
# replaced with, respectively, the name of the function, or the javadoc
# '@param' and '@return' stuff.
cmt_insert_oc_msg_header        = ""         # string

# Whether a comment should be inserted if a preprocessor is encountered when
# stepping backwards from a function name.
#
# Applies to cmt_insert_oc_msg_header, cmt_insert_func_header and
# cmt_insert_class_header.
cmt_insert_before_preproc       = false    # true/false

# Whether a comment should be inserted if a function is declared inline to a
# class definition.
#
# Applies to cmt_insert_func_header.
#
# Default: true
cmt_insert_before_inlines       = true     # true/false

# Whether a comment should be inserted if the function is a class constructor
# or destructor.
#
# Applies to cmt_insert_func_header.
cmt_insert_before_ctor_dtor     = false    # true/false





